type: edu
custom_name: First move!
files:
- name: src/tictactoe/Main.java
  visible: true
  text: "package tictactoe;\n\nimport java.util.Scanner;\n\npublic class Main {\n\
    \    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\
    \        String userInput = scanner.nextLine();\n        System.out.println(\"\
    Enter cells: \" + userInput);\n        char[] chars = userInput.toCharArray();\n\
    \        printFields(chars);\n        analiseInput(chars);\n    }\n\n    public\
    \ static boolean isZerosMoreThanX(int countZeros, int countX) {\n        if (countZeros\
    \ > countX) {\n            return true;\n        }\n        return false;\n  \
    \  }\n\n    public static boolean isZeroWins(char[] chars) {\n        if (chars[0]\
    \ == 'O' && chars[1] == 'O' && chars[2] == 'O' ||\n                chars[3] ==\
    \ 'O' && chars[4] == 'O' && chars[5] == 'O' ||\n                chars[6] == 'O'\
    \ && chars[7] == 'O' && chars[8] == 'O' ||\n                chars[0] == 'O' &&\
    \ chars[3] == 'O' && chars[6] == 'O' ||\n                chars[1] == 'O' && chars[4]\
    \ == 'O' && chars[7] == 'O' ||\n                chars[2] == 'O' && chars[5] ==\
    \ 'O' && chars[8] == 'O' ||\n                chars[0] == 'O' && chars[4] == 'O'\
    \ && chars[8] == 'O' ||\n                chars[2] == 'O' && chars[4] == 'O' &&\
    \ chars[6] == 'O'\n        ) {\n            return true;\n        }\n        return\
    \ false;\n    }\n\n    public static boolean isXWins(char[] chars) {\n       \
    \ if (chars[0] == 'X' && chars[1] == 'X' && chars[2] == 'X' ||\n             \
    \   chars[3] == 'X' && chars[4] == 'X' && chars[5] == 'X' ||\n               \
    \ chars[6] == 'X' && chars[7] == 'X' && chars[8] == 'X' ||\n                chars[0]\
    \ == 'X' && chars[3] == 'X' && chars[6] == 'X' ||\n                chars[1] ==\
    \ 'X' && chars[4] == 'X' && chars[7] == 'X' ||\n                chars[2] == 'X'\
    \ && chars[5] == 'X' && chars[8] == 'X' ||\n                chars[0] == 'X' &&\
    \ chars[4] == 'X' && chars[8] == 'X' ||\n                chars[2] == 'X' && chars[4]\
    \ == 'X' && chars[6] == 'X'\n\n        ) {\n            return true;\n       \
    \ }\n        return false;\n    }\n\n    public static void analiseInput(char[]\
    \ chars) {\n        int countZeros = 0;\n        int countX = 0;\n        int\
    \ emptyCell = 0;\n\n        for (Character ch : chars) {\n            if (ch ==\
    \ 'X') {\n                countX += 1;\n            } else if (ch == 'O') {\n\
    \                countZeros += 1;\n            } else {\n                emptyCell\
    \ += 1;\n            }\n        }\n        \n        if (countZeros == countX\
    \ && countZeros == emptyCell && !isXWins(chars) && !isZeroWins(chars)) {\n   \
    \         System.out.println(\"Game not finished\");\n            return;\n  \
    \      }\n\n        if (isZeroWins(chars) && !isXWins(chars)) {\n            System.out.println(\"\
    O wins\");\n            return;\n        }\n\n        if (isXWins(chars) && !isZeroWins(chars))\
    \ {\n            System.out.println(\"X wins\");\n            return;\n      \
    \  }\n\n        if (isZerosMoreThanX(countZeros, countX) || !isZerosMoreThanX(countZeros,\
    \ countX) && emptyCell > 0) {\n            System.out.println(\"Impossible\");\n\
    \            return;\n        }\n\n        if (countZeros == countX && emptyCell\
    \ > 0) {\n            System.out.println(\"Game not finished\");\n           \
    \ return;\n        }\n\n        if (isZerosMoreThanX(countZeros, countX) || !isZerosMoreThanX(countZeros,\
    \ countX) && emptyCell == 0) {\n            System.out.println(\"Draw\");\n  \
    \          return;\n        }\n    }\n\n    public static void printFields(char[]\
    \ chars) {\n        System.out.println(\"---------\");\n        System.out.printf(\"\
    | %c %c %c |\\n\", chars[0], chars[1], chars[2]);\n        System.out.printf(\"\
    | %c %c %c |\\n\", chars[3], chars[4], chars[5]);\n        System.out.printf(\"\
    | %c %c %c |\\n\", chars[6], chars[7], chars[8]);\n        System.out.println(\"\
    ---------\");\n    }\n}\n"
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                System.arraycopy(field[row], 0, this.field[row], 0, 3);
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] = FieldState.get(str.charAt(row * 3 + col));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 0;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y++;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        String input;
        Clue(String input, int x, int y) {
            this.input = input;
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() {
            super(Main.class);
        }

        static final String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;

            for (String startField : new String[] {
                "_XXOO_OX_",
                "_________",
                "X_X_O____"
            }) {

                for (String input : inputs) {
                    String fullInput = iterateCells(input);

                    String[] strNums = input.split("\\s+");
                    int x = Integer.parseInt(strNums[0]);
                    int y = Integer.parseInt(strNums[1]);

                    if (i % 2 == 1) {
                        // mix with incorrect data
                        fullInput = "4 " + i + "\n" + fullInput;
                    }

                    tests.add(new TestCase<Clue>()
                        .setInput(startField + "\n" + fullInput)
                        .setAttach(new Clue(startField, x, y)));

                    i++;
                }

            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() != 2) {
                return new CheckResult(false,
                    "Can't find two fields inside output");
            }

            TicTacToeField curr = fields.get(0);
            TicTacToeField next = fields.get(1);

            TicTacToeField correctCurr = new TicTacToeField(clue.input);
            TicTacToeField correctNext = new TicTacToeField(correctCurr.field);

            String[] numInputs = iterateCells(clue.x + " " + clue.y).split("\n");
            for (String input : numInputs) {
                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);
                if (correctNext.field[x - 1][y - 1] == FieldState.FREE) {
                    correctNext.field[x - 1][y - 1] = FieldState.X;
                    break;
                }
            }

            if (!curr.equalTo(correctCurr)) {
                return new CheckResult(false,
                    "The first field is not equal to the input field");
            }

            if (!next.equalTo(correctNext)) {
                return new CheckResult(false,
                    "The first field is correct, but the second is not");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/48/stages/258/implement#comment
status: Solved
record: 3
